set drawbox true
set filesep "\\n"
set mouse false
set preview!
set previewer ~/.config/lf/pv.fish
set relativenumber true
set ratios '1:3'
set scrolloff 10
set shell fish
set shellopts ""
set smartcase true
set smartdia true
set wrapscan true
set wrapscroll true

map x :delete
map X !$f

map R :batchRename
map Z :zi

map zf filter
map zF setfilter ""

map zp :{{
  set preview!
  reratio
}}

map zh
map . set hidden!

map gr cd /
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config

map S $/usr/bin/fish

map <enter> floatermcompatibleopen

map o &xdg-open $f
map O &re.sonny.Junction $f

map <c-enter>
map <a-[> &{{
  nvr --remote-send "q"
  nvr --remote $f
}}

map a
map a :create

map w
map wd :dragdrop
map we :extract

cmd dragdrop &dragon-drop (string split "\n" "$fx")

cmd create %{{
  printf "New file/directory: "
  read -l path
  if test -n "$path"
    if string match -r '/$' "$path"
      mkdir -p "$path"
      echo "Created directory: $path"
    else
      set -l realFilePath (realpath "$path")
      set -l baseDirName (dirname "$realFilePath")
      mkdir -p "$baseDirName" &> /dev/null
      touch "$realFilePath"
      echo "Created file: $path"
    end
  else
    echo "No file/directory created"
  end
}}

cmd extract $ouch d $f

cmd zi ${{
  set -l result (zoxide query -i)
	lf -remote "send $id cd $result"
}}

cmd batchRename ${{
  set -l filesChanged 0
  set -l filesIn (string split "\n" "$fx")
  set -l filesOutLocation (mktemp)
  printf "$fx\n" > "$filesOutLocation"

  $EDITOR "$filesOutLocation"

  set -l filesOut (string split "\n" (cat "$filesOutLocation"))

  for i in (seq 1 (count $filesIn))
    if test "$filesIn[$i]" != "$filesOut[$i]"
      mv "$filesIn[$i]" "$filesOut[$i]"
      set filesChanged (math $filesChanged + 1)
    end
  end


  lf -remote "send echo Files renamed: $filesChanged"
  lf -remote "send unselect"
}}

cmd reratio &{{
  if test "$lf_preview" = "true"
    lf -remote "send set ratios '1:2:2'"
  else
    lf -remote "send set ratios '1:3'"
  end
}}

cmd floatermcompatibleopen &{{
  if type -q "floaterm"
    floaterm $f
  else if test -n "$NVIM"
    nvr --servername "$NVIM" --remote $f
  else
    open $f
  end
}}
