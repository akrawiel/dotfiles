#+title My Emacs configuration
#+property: header-args:emacs-lisp
#+startup: overview

* Keep files clean

#+begin_src emacs-lisp
  
  (use-package no-littering)
  
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  
#+end_src

* Auto package update

#+begin_src emacs-lisp
  
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "08:00"))
  
#+end_src

* Basic UI config

#+begin_src emacs-lisp
  
  (setq inhibit-startup-message t)
  (scroll-bar-mode 1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (tab-bar-mode 1)
  (setq tab-bar-show t)
  (setq enable-recursive-minibuffers t)
  
  (setq-default tab-width 2)
  (setq whitespace-style '(face trailing tabs spaces tab-mark space-mark))
  (add-hook 'prog-mode-hook 'whitespace-mode)

  (setq gc-cons-threshold (* 100 1024 1024)
   read-process-output-max (* 1024 1024))
  
#+end_src

* Font config

#+begin_src emacs-lisp
  
  (defun akrw/set-font ()
    (set-face-attribute 'default nil
                        :font "Cascadia Code PL"
                        :height 110))
  
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (akrw/set-font))))
    (akrw/set-font))
  
#+end_src

* Line numbers

#+begin_src emacs-lisp
  
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  
#+end_src

* Doom modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
  
#+end_src

* Doom themes

#+begin_src emacs-lisp
  
  ;; (load-theme 'doom-miramare t) -> low cont
  ;; (load-theme 'doom-sourcerer t) -> pretty low cont
  ;; (load-theme 'doom-spacegray t) -> pretty low cont
  ;; (load-theme 'doom-wilmersdorf t) -> low cont
  ;; (load-theme 'doom-zenburn t) -> classic
  ;; (load-theme 'doom-1337 t) -> high cont
  ;; (load-theme 'doom-monokai-ristretto t) -> coffee like
  
  (use-package doom-themes
    :config
    (load-theme 'doom-nord t)
    (doom-themes-org-config))
  
#+end_src

* Selectrum

** Selectrum Base

#+begin_src emacs-lisp
  
  (use-package selectrum
    :config
    (selectrum-mode 1))
  
#+end_src

** Selectrum Prescient

#+begin_src emacs-lisp
  
  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode 1)
    (prescient-persist-mode 1))
  
#+end_src

** Marginalia

#+begin_src emacs-lisp
  
  (use-package marginalia
    :init
    (marginalia-mode))
  
#+end_src

** Consult

#+begin_src emacs-lisp
  
  (use-package consult
    :config
    (setq consult-project-root-function #'projectile-project-root
          consult-ripgrep-args "rg --glob \!.git --ignore --hidden --line-buffered --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --line-number ."
          consult-preview-max-count 0
          consult-async-min-input 2))
  
#+end_src

* Company

** Company Base

#+begin_src emacs-lisp
  
  (use-package company
    :after lsp-mode
    :hook ((lsp-mode . company-mode)
           (org-mode . company-mode)
           (emacs-lisp-mode . company-mode))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5))
  
#+end_src

** Company Box

#+begin_src emacs-lisp
  
  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
  
#+end_src

* Flycheck

#+begin_src emacs-lisp
  
  (use-package flycheck
    :init
    (global-flycheck-mode))
  
#+end_src

* Which key

#+begin_src emacs-lisp
  
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
  
#+end_src

* Projectile

** Projectile Base

#+begin_src emacs-lisp
  
  (use-package projectile
    :config
    (projectile-mode 1))
  
#+end_src

* Avy

#+begin_src emacs-lisp
  
  (use-package avy
    :config
    (avy-setup-default))
  
#+end_src

* Editorconfig

#+begin_src emacs-lisp
  
  (use-package editorconfig
    :config
    (editorconfig-mode 1))

#+end_src

* Undo-fu

#+begin_src emacs-lisp

  (use-package undo-fu
    :config
    (global-unset-key (kbd "C-z")))
  
#+end_src

* Evil

** Evil Base

#+begin_src emacs-lisp
  
  (use-package evil
    :after undo-fu
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))
  
#+end_src

** Evil Collection

#+begin_src emacs-lisp
  
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  
#+end_src

** Evil Surround

#+begin_src emacs-lisp
  
  (use-package evil-surround
    :after evil-collection
    :config
    (global-evil-surround-mode 1))
  
#+end_src

** Evil Nerd Commenter

#+begin_src emacs-lisp
  
  (use-package evil-nerd-commenter
    :after evil-collection
    :config
    (evilnc-default-hotkeys))
  
#+end_src

** Evil Matchit

#+begin_src emacs-lisp

  (use-package evil-matchit
    :after evil-collection
    :config
    (global-evil-matchit-mode 1))
  
#+end_src

** Evil Snipe

#+begin_src emacs-lisp
  
  (use-package evil-snipe
    :after evil-collection
    :init
    (setq evil-snipe-scope 'buffer
          evil-snipe-repeat-scope 'buffer
          evil-snipe-auto-scroll t)
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
  
#+end_src

** Evil Anzu

#+begin_src emacs-lisp
  
  (use-package evil-anzu
    :after evil-collection
    :config
    (global-anzu-mode 1))
  
#+end_src

** Evil Multiedit

#+begin_src emacs-lisp
  
  (use-package evil-multiedit
    :after evil-collection
    :config
    (evil-multiedit-default-keybinds))
  
#+end_src

* Helpful

#+begin_src emacs-lisp
  
  (use-package helpful)
  
#+end_src

* All the icons

#+begin_src emacs-lisp
  
  (use-package all-the-icons)

#+end_src

* Org Mode

** Org Mode Init Hook

#+begin_src emacs-lisp
  
  (defun akrw/org-mode-init-hook ()
    (org-indent-mode)
    (visual-line-mode 1))
  
#+end_src

** Org Mode Base

#+begin_src emacs-lisp
  
  (setq org-ellipsis " â†“"
        org-agenda-files '((file-truename "~/Org/agenda.org"))
        org-agenda-start-with-log-mode t
        org-log-done 'time
        org-log-into-drawer t
        org-capture-templates
        '(("t" "Task" entry (file+olp (file-truename "~/Org/agenda.org") "Inbox") "* TODO %?\n %U\n %a\n %i" :empty-lines 1)))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  
  (add-hook 'org-mode-hook 'akrw/org-mode-init-hook)
  
#+end_src

** Org Roam

#+begin_src emacs-lisp
  
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t
          org-roam-completion-everywhere t
          org-roam-mode-section-functions '(org-roam-backlinks-section org-roam-reflinks-section)
          org-roam-directory (file-truename "~/OrgRoam")
          org-roam-capture-templates '(("d" "default" plain "%?"
                                        :target (file+head "${slug}.org"
                                                           "#+title: ${title}\n")
                                        :unnarrowed t))
          org-roam-dailies-directory "dailies/"
          org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n"))))
    :config
    (org-roam-db-autosync-mode))
  
#+end_src

** Visual fill column

#+begin_src emacs-lisp
  
  (defun akrw/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
  (use-package visual-fill-column
    :hook (org-mode . akrw/org-mode-visual-fill))
  
#+end_src

* General

#+begin_src emacs-lisp
  
  (use-package general
    :after evil-collection
    :init
    (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace))
    :config
    (general-evil-setup)
    (general-create-definer akrw/leader-keys
      :states '(normal visual motion)
      :prefix "SPC"))
  
#+end_src

* Eshell

#+begin_src emacs-lisp
  
  (defun akrw/eshell-first-time-hook ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (evil-normalize-keymaps)
    (setq eshell-history-size 1000
          eshell-buffer-maximum-lines 1000
          eshell-hist-ignoredups t
          eshell-cd-on-directory t
          eshell-scroll-to-bottom-on-input t))
  
  (use-package eshell
    :hook (eshell-first-time-mode . akrw/eshell-first-time-hook))
  
#+end_src

* Dired

** Dired Base

#+begin_src emacs-lisp
  
  (setq dired-listing-switches "-agho --group-directories-first")
  
#+end_src

** Dired Single

#+begin_src emacs-lisp
  
  (use-package dired-single)
  
#+end_src

** Dired All The Icons

#+begin_src emacs-lisp
  
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Smooth scrolling

#+begin_src emacs-lisp
  
  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1))

#+end_src

* Auth sources

#+begin_src emacs-lisp
  
  (setq auth-sources '(password-store "~/.authinfo" "~/.authinfo.gpg" "~/.netrc"))
  
#+end_src

* Keybindings

#+begin_src emacs-lisp
  
  (defun akrw/search-config ()
    "Search through emacs config directory."
    (interactive)
    (projectile-find-file-in-directory "~/dotfiles"))
  
  (defun akrw/kill-current-tab ()
    "Kills current tab and its buffer."
    (interactive)
    (kill-current-buffer)
    (tab-bar-close-tab))
  
  (akrw/leader-keys
    :keymaps 'override
    "DEL" '(selectrum-repeat :wk "repeat last command")
    "f" '(:ignore t :wk "files")
    "fr" '(consult-ripgrep :wk "rg over project")
    "fp" '(akrw/search-config :wk "config files")
    "ff" '(find-file :wk "find file from current dir")
    "fs" '(save-buffer :wk "save file")
    "RET" '(execute-extended-command :wk "M-x")
    "SPC" '(projectile-find-file :wk "find file")
    "F" '(avy-goto-char :wk "goto 1-char")
    "S" '(avy-goto-char-2 :wk "goto 2-char")
    "/" '(consult-line :wk "occur")
    "t" '(:ignore t :wk "tabs")
    "tn" '(tab-bar-new-tab :wk "new tab")
    "tc" '(tab-bar-close-tab :wk "close tab")
    "tC" '(akrw/kill-current-tab :wk "close tab and its buffer")
    "tU" '(tab-bar-undo-close-tab :wk "undo close tab")
    "D" '(dired-jump :wk "open dired here")
    "a" '(:ignore t :wk "org agenda")
    "aa" '(org-agenda :wk "org agenda")
    "al" '(org-agenda-list :wk "org agenda list")
    "ac" '(org-capture :wk "org agenda capture")
    "b" '(:ignore t :wk "buffers")
    "bd" '(kill-this-buffer :wk "kill current buffer")
    "TAB" '(consult-buffer :wk "switch buffer")
    "c" '(:ignore t :wk "code")
    "ci" '(consult-imenu :wk "imenu")
    "cc" '(flycheck-buffer :wk "refresh flycheck buffer")
    "e" '(:ignore t :wk "eshell")
    "ee" '(eshell :wk "eshell here")
    "ep" '(project-eshell :wk "eshell in project's root")
    "w" '(:ignore t :wk "windows")
    "wc" '(evil-window-delete :wk "close window")
    "wC" '(kill-buffer-and-window :wk "close window and kill buffer")
    "wd" '(evil-window-delete :wk "close window")
    "wD" '(kill-buffer-and-window :wk "close window and kill buffer")
    "wh" '(evil-window-left :wk "focus window on left")
    "wj" '(evil-window-down :wk "focus window on bottom")
    "wk" '(evil-window-up :wk "focus window on top")
    "wl" '(evil-window-right :wk "focus window on right")
    "wH" '(evil-window-move-far-left :wk "move window to left")
    "wJ" '(evil-window-move-very-bottom :wk "move window to bottom")
    "wK" '(evil-window-move-very-top :wk "move window to top")
    "wL" '(evil-window-move-far-right :wk "move window to right")
    "r" '(:ignore t :wk "org roam")
    "rd" '(org-roam-dailies-goto-today :wk "today's daily note")
    "rD" '(org-roam-dailies-goto-yesterday :wk "yesterday's daily note")
    "r\C-d" '(org-roam-dailies-goto-date :wk "find daily note by date")
    "rr" '(org-roam-node-find :wk "find node")
    "rG" '(org-roam-graph :wk "open graph")
    "rb" '(org-roam-buffer-toggle :wk "toggle org roam buffer")
    "rR" '(org-roam-ref-add :wk "add reference to note")
    "rT" '(org-roam-tag-add :wk "add tags to note"))
  
  (general-define-key
   :keymaps 'selectrum-minibuffer-map
   "C-j" 'selectrum-next-candidate
   "C-k" 'selectrum-previous-candidate
   "C-a" 'embark-act
   [escape] 'keyboard-escape-quit)
  
  (general-define-key
   :states 'insert
   :keymaps 'eshell-mode-map
   "C-r" 'consult-history
   "<home>" 'eshell-bol)
  
  (general-define-key
   :states 'insert
   :keymaps 'org-mode-map
   "M-i" 'org-roam-node-insert)
  
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   "h" 'dired-single-up-directory
   "l" 'dired-single-buffer)
  
  (general-define-key
   :states 'motion
   [remap describe-command] 'helpful-command
   [remap describe-key] 'helpful-key
   " " nil)
  
  (general-define-key
   :states 'normal
   "u" 'undo-fu-only-undo
   "\C-r" 'undo-fu-only-redo)
  
  (general-define-key
   :states 'insert
   "\C-q" 'company-capf)
  
#+end_src
